<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">


	<!-- Annotation wiring -->
	<context:annotation-config></context:annotation-config>
	<context:component-scan base-package="org.ennva.spring_maven_tutorial.dao.impl"></context:component-scan>
	<context:component-scan base-package="org.ennva.spring_maven_tutorial.utils"></context:component-scan>
	<!-- <context:property-placeholder location="classpath:*.properties"></context:property-placeholder> -->

	<!-- Enable AspectJ style of Spring AOP -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="false"/> -->
	<!-- <bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" 
		/> -->
	<!-- <aop:config> -->
	<!-- <aop:aspect id="loggingAspect" ref="loggingAspect"> -->

	<!-- <aop:pointcut expression="args(name, ex)" id="afterThrowing" /> -->
	<!-- <aop:pointcut expression="args(String)" id="after" /> -->

	<!-- <aop:before method="loggingAdvice" -->
	<!-- pointcut="within(org.ennva.spring_maven_tutorial.model.*)"></aop:before> -->
	<!-- <aop:before method="allGetNameMethods" pointcut="execution(public String 
		getName())" /> -->
	<!-- <aop:before method="allStringMethodArguments" pointcut="args(name, -->
	<!-- returnString)" returning="returnString"></aop:before> -->
	<!-- <aop:after-returning method="allStringMethodArguments" -->
	<!-- pointcut="args(name, returnString)" /> -->
	<!-- <aop:after-throwing method="exceptionAdvice" -->
	<!-- pointcut-ref="afterThrowing" /> -->
	<!-- <aop:after method="afterAdvice()" pointcut-ref="after" /> -->
	<!-- <aop:around method="myAroundAdvice" pointcut="execution(* get*())" 
		/> -->
	<!-- </aop:aspect> -->
	<!-- </aop:config> -->

	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://localhost:3306/NEPHDB"></property>
		<property name="username" value="root"></property>
		<property name="password" value="admin"></property>
		<property name="initialSize" value="2"></property>
		<property name="maxActive" value="5"></property>
	</bean>

	<!-- Creating session factory -->
	<bean class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		id="sessionFactory">
		<property name="dataSource" ref="dataSource" />

		<property name="packagesToScan">
			<list>
				<value>org.ennva.spring_maven_tutorial.model</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>
	</bean>

	<bean id="employeeDaoImpl"
		class="org.ennva.spring_maven_tutorial.dao.impl.EmployeeDaoImpl">
		<property name="sessionFactory" ref="sessionFactory" />
		<!-- <property name="jdbcTemplate" ref="jdbcTemplateObject" /> -->
	</bean>

	<!-- <tx:annotation-driven /> -->
	<!-- <bean id="transactionManager" -->
	<!-- class="org.springframework.orm.hibernate4.HibernateTransactionManager"> -->
	<!-- <property name="sessionFactory" ref="sessionFactory" /> -->
	<!-- </bean> -->

	<!-- <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate"> -->
	<!-- <property name="sessionFactory" ref="sessionFactory" /> -->
	<!-- </bean> -->

	<!-- <bean name="openSessionInViewInterceptor" -->
	<!-- class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor"> -->
	<!-- <property name="sessionFactory"> -->
	<!-- <ref bean="sessionFactory" /> -->
	<!-- </property> -->
	<!-- <property name="flushModeName" value="FLUSH_AUTO" /> -->
	<!-- </bean> -->

	<!-- sessionFactory bean -->
	<!-- <bean class="org.springframework.orm.hibernate4.HibernateTransactionManager" 
		id="transactionManager"> -->
	<!-- <property name="sessionFactory" ref="sessionFactory"></property> -->
	<!-- </bean> -->

	<!-- jdbcTemplate bean -->
	<!-- <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplateObject"> -->
	<!-- <property name="dataSource" ref="dataSource"></property> -->
	<!-- </bean> -->

	<!-- <bean name="triangle" class="org.ennva.spring_maven_tutorial.model.Triangle"> -->
	<!-- <property name="name" value="triangle name" /> -->
	<!-- </bean> -->

	<!-- <bean name="circle" class="org.ennva.spring_maven_tutorial.model.Circle"> -->
	<!-- <property name="name" value="circle name" /> -->
	<!-- </bean> -->

	<!-- <bean name="shapeService" class="org.ennva.spring_maven_tutorial.service.ShapeService"> -->
	<!-- <property name="triangle" ref="triangle" /> -->
	<!-- <property name="circle" ref="circle" /> -->
	<!-- </bean> -->

	<!-- <bean class="org.ennva.spring_maven_tutorial.aop.LoggingAspect" -->
	<!-- name="loggingAspect" /> -->


</beans>
